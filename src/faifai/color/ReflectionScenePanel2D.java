/***************************************************************
 *
 * Interactive Demo: Colors in Digital Multimedia
 * Copyright (c) 2010 Dr. Andrew Kwok-Fai LUI
 * The Open University of Hong Kong
 *
 * Enhance the learning effectiveness of students through greater interactions
 */
/*  This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package faifai.color;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;

public class ReflectionScenePanel2D extends javax.swing.JPanel {

  private Color lightSourceColor = Color.WHITE;
  private Color lightSourceColorSecond = Color.BLACK;
  private Color sphereColor = Color.WHITE;
  private Polygon lightingShape = null;
  private Polygon lightingTipShape = null;
  private int numberOfLightSource = 1;

  /** Creates new form SimpleScenePanel */
  public ReflectionScenePanel2D() {
    initComponents();
    setPreferredSize(new Dimension(350, 350));
    int xpoint1[] = {0, 25, 25, 0};
    int ypoint1[] = {0, 0, 35, 35};
    lightingShape = new Polygon(xpoint1, ypoint1, 4);
    int xpoint2[] = {0, 25, 25, 0};
    int ypoint2[] = {35, 35, 45, 45};
    lightingTipShape = new Polygon(xpoint2, ypoint2, 4);
  }

  public void setNumberOfLightSource(int numberOfLightSource) {
    this.numberOfLightSource = numberOfLightSource;
  }

  private Polygon getPolygon() {
    int width = super.getWidth();
    int height = super.getHeight();
    int midx = width / 2;
    int midy = height / 2;
    int xpoint[] = new int[4];
    int ypoint[] = new int[4];
    xpoint[0] = midx - width / 6;
    xpoint[1] = midx + width / 6;
    xpoint[2] = midx + width / 4;
    xpoint[3] = midx - width / 4;
    ypoint[0] = midy + height / 4;
    ypoint[1] = midy + height / 4;
    ypoint[2] = midy + height / 4 + 40;
    ypoint[3] = midy + height / 4 + 40;
    Polygon thePolygon = new Polygon(xpoint, ypoint, 4);
    return thePolygon;
  }

  public void setLightColor(Color lightSourceColor) {
    this.lightSourceColor = lightSourceColor;
    repaint();
  }

  public void setLightColorSecond(Color lightSourceColorSecond) {
    this.lightSourceColorSecond = lightSourceColorSecond;
    repaint();
  }

  public void setSphereColor(Color sphereColor) {
    this.sphereColor = sphereColor;
    repaint();
  }

  private Color getObjectColour() {
    int red = lightSourceColor.getRed() + lightSourceColorSecond.getRed();
    int green = lightSourceColor.getGreen() + lightSourceColorSecond.getGreen();
    int blue = lightSourceColor.getBlue() + lightSourceColorSecond.getBlue();
    if (sphereColor.getRed() < red) {
      red = sphereColor.getRed();
    }
    if (sphereColor.getGreen() < green) {
      green = sphereColor.getGreen();
    }
    if (sphereColor.getBlue() < blue) {
      blue = sphereColor.getBlue();
    }
    //System.out.println(red + " " + green + " " + blue);
    return new Color(red, green, blue);
  }

  public void paint(Graphics graphics) {
    Graphics2D g2d = (Graphics2D) graphics;

    int width = super.getWidth();
    int height = super.getHeight();
    g2d.setColor(Color.BLACK);
    g2d.fillRect(0, 0, width, height);
    g2d.setColor(getObjectColour());
    g2d.fillPolygon(getPolygon());

    g2d.translate(width * 3 / 8, 60);
    g2d.setColor(Color.DARK_GRAY);
    g2d.fillPolygon(lightingShape);

    g2d.setColor(lightSourceColor);
    g2d.fillPolygon(lightingTipShape);
    if (this.numberOfLightSource > 1) {
      g2d.translate(width * 1.5 / 8, 0);
      g2d.setColor(Color.DARK_GRAY);
      g2d.fillPolygon(lightingShape);

      g2d.setColor(lightSourceColorSecond);
      g2d.fillPolygon(lightingTipShape);
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setBackground(new java.awt.Color(0, 0, 0));
    setBorder(javax.swing.BorderFactory.createTitledBorder(null, "2D Scene", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 11), new java.awt.Color(255, 255, 255))); // NOI18N
    setLayout(new java.awt.GridLayout(1, 0));
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}
